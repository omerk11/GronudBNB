@model GroundBNB.Models.Apartment

@{
    ViewData["Title"] = "Details";
    int count = 1;
    string userID = "";
    if (User.Identity.IsAuthenticated)
    {
        userID = User.Claims.FirstOrDefault(c => c.Type == "ID").Value;
    }
}

<style>
    .details-table {
        margin-top: 20px;
    }

    .details-table td {
        padding: 10px;
    }
</style>

<main class="main-list">
    <h1>@Html.DisplayFor(model => model.Title)</h1>
    <section>
        <div class="data">
            <div class="desc">
                @Html.DisplayFor(model => model.Description)
                <table class="details-table">
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.NumOfRooms)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.NumOfRooms)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.PricePerDay)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.PricePerDay)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.City)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.City)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.Street)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.Street)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.Floor)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.Floor)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.ApartmentNumber)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.ApartmentNumber)
                        </td>
                    </tr>
                    <tr>
                        <th class="col-sm-2">
                            @Html.DisplayNameFor(model => model.MaxNumOfGuests)
                        </th>
                        <td class="col-sm-10">
                            @Html.DisplayFor(model => model.MaxNumOfGuests)
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="tools">
            @Html.DisplayFor(model => model.ApartmentOwner.Email)
        </div>
    </section>
    <div>
        <dl class="row">
        </dl>
    </div>
</main>
<main class="main-list">
    <style>
        #map {
            height: 400px;
            width: 100%;
        }
    </style>
    <div id="map">
    </div>
    <!--The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-app.js">
    </script>
    <!--TODO: Add SDKs for Firebase products that you want to use
             https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-analytics.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.3.2/firebase-remote-config.js"></script>

    <script>
        // Your web app's Firebase configuration
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        var firebaseConfig = {
            apiKey: "AIzaSyB_-wogOV_Nlx16tl6bebvw-uqNpe38CRk",
            authDomain: "groundbnb-308a5.firebaseapp.com",
            projectId: "groundbnb-308a5",
            storageBucket: "groundbnb-308a5.appspot.com",
            messagingSenderId: "671434416272",
            appId: "1:671434416272:web:d9d1ef9710dbf2aa98b815",
            measurementId: "G-C0QWDTRD28"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        firebase.analytics();

    </script>
    <script>
        // Loading API Key for Google Maps API from remote config
        const remoteConfig = firebase.remoteConfig();
        remoteConfig.settings.minimumFetchIntervalMillis = 3600000;
        remoteConfig.fetchAndActivate()
            .then(() => {
                window.apiKey = remoteConfig.getString("GoogleMapsAPIKey");
                let script = document.createElement('script');
                script.src = 'https://maps.googleapis.com/maps/api/js?key=' + remoteConfig.getString("GoogleMapsAPIKey") +
                    '&callback=initMap&libraries=places';
                script.async = true;
                document.body.appendChild(script);
            }).catch((err) => {
                console.error(err);
            });
    </script>
    <script>
        function initMap() {
            var address = '@Model.City' + '+' + '@Model.Street';
            var lat, lng, latlang;
            address.replace(" ", "+");
            var url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address + '&key=' + window.apiKey;
            $.getJSON(url, function (data) {
                lat = data['results'][0]["geometry"]["location"]["lat"];
                lng = data['results'][0]["geometry"]["location"]["lng"];
                latlang = new google.maps.LatLng(lat, lng)
                const options = {
                    zoom: 13,
                    center: latlang
                };
                var map = new google.maps.Map(document.getElementById('map'), options);
                var marker = new google.maps.Marker({
                    position: latlang,
                    map: map
                });
            });
        }
    </script>
</main>
<main class="main-list">
    <h1>Reviews (@Model.Reservations.Count())</h1>
    @foreach (var item in Model.Reservations)
    {
        if (item.Rating == null && item.Review == null)
            continue;
        <section>
            <div class="data">
                <div class="desc">
                    <p>
                        @if (!String.IsNullOrEmpty(item.Review))
                        {
                            @Html.DisplayFor(modeItem => item.Review)
                        }
                        else
                        {
                        <p>No text review added.</p>
                        }
                    </p>
                </div>
                <div class="tools">
                    #@count
                </div>
            </div>
            <div class="footerdata" style="font-size: 18px;">
                <strong>Rating: @Html.DisplayFor(modeItem => item.Rating)/5</strong>
            </div>
        </section>
        count++;
    }

</main>
<main class="main-list">
    @if (userID == Model.ApartmentOwnerID.ToString())
    {

        <script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
        <section class="metadata">
            <div class="title">
                <h2>
                    Apartments Views
                </h2>
            </div>
            <div class="bar-stats">
                <canvas id="myChart" width="640" height="150">
                </canvas>

                <script>
                    var ctx = document.getElementById('myChart').getContext('2d');

                    var mainData = @Html.Raw(JsonSerializer.Serialize(Model.ApartmentsViews));
                    var data = [
                        ...mainData.map(x => ({ ...x, Date: x.Date.split("T")[0] }))
                    ];

                    var myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: data.map(d => d.Date),
                            datasets: [{
                                label: '# of Views',
                                data: data.map(d => d.Views),
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                ],
                                borderWidth: 1
                            }]
                        },
                        options:
                        {
                            scales:
                            {
                                y:
                                {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                </script>
            </div>
        </section>
    }
</main>